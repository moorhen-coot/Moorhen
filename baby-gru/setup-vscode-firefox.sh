#!/bin/bash

# Setup VS Code Server for Firefox Console Links
# This script configures VS Code Server remote CLI as the default editor
# for clickable file paths in Firefox console errors

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to detect VS Code installation
detect_vscode() {
    print_status "Detecting VS Code installation..."
    
    # Check for VS Code Server (remote)
    if command -v code >/dev/null 2>&1; then
        CODE_PATH=$(which code)
        print_success "Found VS Code at: $CODE_PATH"
        
        # Check if it's VS Code Server
        if [[ $CODE_PATH == *".vscode-server"* ]]; then
            print_success "Detected VS Code Server (remote CLI)"
            return 0
        else
            print_success "Detected regular VS Code installation"
            return 0
        fi
    fi
    
    # Check common VS Code installation paths
    local vscode_paths=(
        "/usr/bin/code"
        "/usr/local/bin/code"
        "/snap/bin/code"
        "/opt/visual-studio-code/bin/code"
        "$HOME/.local/bin/code"
    )
    
    for path in "${vscode_paths[@]}"; do
        if [[ -f "$path" ]]; then
            CODE_PATH="$path"
            print_success "Found VS Code at: $CODE_PATH"
            return 0
        fi
    done
    
    print_error "VS Code not found! Please install VS Code first."
    echo "Visit: https://code.visualstudio.com/download"
    exit 1
}

# Function to create wrapper script
create_wrapper_script() {
    print_status "Creating wrapper script..."
    
    # Create ~/.local/bin directory
    mkdir -p "$HOME/.local/bin"
    
    # Create wrapper script
    cat > "$HOME/.local/bin/code-wait" << EOF
#!/bin/bash
# Wrapper script to run VS Code with --wait flag
# Generated by setup-vscode-firefox.sh

exec "$CODE_PATH" --wait "\$@"
EOF
    
    # Make it executable
    chmod +x "$HOME/.local/bin/code-wait"
    
    print_success "Created wrapper script: $HOME/.local/bin/code-wait"
}

# Function to update shell configuration
update_shell_config() {
    print_status "Updating shell configuration..."
    
    # Detect shell
    local shell_name=$(basename "$SHELL")
    local config_file=""
    
    case $shell_name in
        bash)
            config_file="$HOME/.bashrc"
            ;;
        zsh)
            config_file="$HOME/.zshrc"
            ;;
        fish)
            config_file="$HOME/.config/fish/config.fish"
            print_warning "Fish shell detected. You may need to configure manually."
            ;;
        *)
            config_file="$HOME/.profile"
            print_warning "Unknown shell ($shell_name). Using .profile"
            ;;
    esac
    
    print_status "Updating $config_file..."
    
    # Backup existing config
    if [[ -f "$config_file" ]]; then
        cp "$config_file" "${config_file}.backup.$(date +%Y%m%d_%H%M%S)"
        print_status "Backed up existing config to ${config_file}.backup.$(date +%Y%m%d_%H%M%S)"
    fi
    
    # Remove existing VS Code editor configuration if present
    if [[ -f "$config_file" ]]; then
        sed -i '/# VS Code.*as default editor.*Firefox/,+5d' "$config_file" 2>/dev/null || true
        sed -i '/# Add local bin to PATH/,+1d' "$config_file" 2>/dev/null || true
    fi
    
    # Add new configuration
    cat >> "$config_file" << 'EOF'

# Add local bin to PATH (for VS Code wrapper script)
if [[ ":$PATH:" != *":$HOME/.local/bin:"* ]]; then
    export PATH="$HOME/.local/bin:$PATH"
fi

# VS Code Server as default editor for Firefox console links
export EDITOR="code-wait"
export VISUAL="code-wait"
export REACT_EDITOR="code"
export BROWSER_EDITOR="code"
EOF
    
    print_success "Updated $config_file"
}

# Function to configure Git
configure_git() {
    print_status "Configuring Git to use VS Code..."
    
    git config --global core.editor "code-wait" 2>/dev/null || {
        print_warning "Could not configure Git (git not installed or accessible)"
    }
    
    print_success "Git configured to use VS Code"
}

# Function to set file associations
set_file_associations() {
    print_status "Setting file associations..."
    
    if command -v xdg-mime >/dev/null 2>&1; then
        xdg-mime default code.desktop text/plain 2>/dev/null || true
        xdg-mime default code.desktop text/x-javascript 2>/dev/null || true
        xdg-mime default code.desktop text/x-typescript 2>/dev/null || true
        xdg-mime default code.desktop application/javascript 2>/dev/null || true
        print_success "File associations set"
    else
        print_warning "xdg-mime not available. Skipping file associations."
    fi
}

# Function to test installation
test_installation() {
    print_status "Testing installation..."
    
    # Test wrapper script
    if [[ -x "$HOME/.local/bin/code-wait" ]]; then
        print_success "Wrapper script is executable"
    else
        print_error "Wrapper script is not executable"
        return 1
    fi
    
    # Test code command with --help
    if "$HOME/.local/bin/code-wait" --help >/dev/null 2>&1; then
        print_success "VS Code wrapper script works correctly"
    else
        print_error "VS Code wrapper script failed test"
        return 1
    fi
    
    # Create test file and open it
    local test_file="/tmp/vscode_test_$(date +%s).js"
    echo "console.log('VS Code Firefox console test');" > "$test_file"
    
    print_status "Testing file opening (will open in VS Code)..."
    "$HOME/.local/bin/code-wait" "$test_file" &
    local code_pid=$!
    
    # Wait a moment then clean up
    sleep 2
    rm -f "$test_file"
    
    print_success "Test completed"
}

# Function to show final instructions
show_instructions() {
    echo ""
    echo "=================================="
    print_success "Setup completed successfully!"
    echo "=================================="
    echo ""
    echo "What was configured:"
    echo "  ✓ VS Code wrapper script created"
    echo "  ✓ Shell environment variables set"
    echo "  ✓ Git configured to use VS Code"
    echo "  ✓ File associations set"
    echo ""
    echo "Next steps:"
    echo "  1. Restart your terminal (or run: source ~/.bashrc)"
    echo "  2. Completely restart Firefox"
    echo "  3. Start your development server"
    echo "  4. Create an error in your code"
    echo "  5. Click on file paths in Firefox console"
    echo ""
    echo "The files should now open in VS Code instead of vim!"
    echo ""
    print_warning "Important: You MUST restart Firefox completely for changes to take effect."
    echo ""
}

# Main execution
main() {
    echo "=================================="
    echo "VS Code Firefox Console Setup"
    echo "=================================="
    echo ""
    
    # Check if running on Linux
    if [[ "$OSTYPE" != "linux-gnu"* ]]; then
        print_error "This script is designed for Linux systems only."
        exit 1
    fi
    
    # Detect VS Code
    detect_vscode
    
    # Create wrapper script
    create_wrapper_script
    
    # Update shell configuration
    update_shell_config
    
    # Configure Git
    configure_git
    
    # Set file associations
    set_file_associations
    
    # Test installation
    test_installation
    
    # Show final instructions
    show_instructions
}

# Handle script arguments
case "${1:-}" in
    --help|-h)
        echo "VS Code Firefox Console Setup Script"
        echo ""
        echo "Usage: $0 [options]"
        echo ""
        echo "Options:"
        echo "  --help, -h    Show this help message"
        echo "  --test        Test current installation"
        echo "  --uninstall   Remove VS Code editor configuration"
        echo ""
        echo "This script configures VS Code as the default editor for"
        echo "clickable file paths in Firefox console errors."
        exit 0
        ;;
    --test)
        print_status "Testing current installation..."
        if [[ -f "$HOME/.local/bin/code-wait" ]]; then
            test_installation
        else
            print_error "VS Code wrapper not found. Run setup first."
            exit 1
        fi
        exit 0
        ;;
    --uninstall)
        print_status "Removing VS Code editor configuration..."
        
        # Remove wrapper script
        rm -f "$HOME/.local/bin/code-wait"
        print_status "Removed wrapper script"
        
        # Remove from shell config
        for config in "$HOME/.bashrc" "$HOME/.zshrc" "$HOME/.profile"; do
            if [[ -f "$config" ]]; then
                sed -i '/# Add local bin to PATH.*VS Code/,+6d' "$config" 2>/dev/null || true
                sed -i '/# VS Code.*as default editor.*Firefox/,+5d' "$config" 2>/dev/null || true
            fi
        done
        print_status "Removed from shell configuration"
        
        # Reset Git editor
        git config --global --unset core.editor 2>/dev/null || true
        print_status "Reset Git editor"
        
        print_success "VS Code editor configuration removed"
        echo "You may need to restart your terminal and Firefox."
        exit 0
        ;;
    "")
        # No arguments, run main setup
        main
        ;;
    *)
        print_error "Unknown option: $1"
        echo "Use --help for usage information."
        exit 1
        ;;
esac
